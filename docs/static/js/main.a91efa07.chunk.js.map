{"version":3,"sources":["lib/BridgeManager.js","lib/theme.js","lib/components/LocalEditor.js","App.js","serviceWorker.js","index.js"],"names":["BridgeManager","this","updateObservers","initiateBridge","instance","callback","observer","push","note","componentManager","ComponentManager","name","streamContextItem","item","notifyObserversOfUpdate","content","text","replace","saveItemWithPresave","colors","almostBlack","lightBlack","almostWhite","white","white10","black","black10","primary","greyLight","grey","greyMid","greyDark","base","fontFamily","fontFamilyMono","fontWeight","zIndex","link","placeholder","textSecondary","textLight","textHighlight","selected","codeComment","codePunctuation","codeNumber","codeProperty","codeTag","codeString","codeSelector","codeAttr","codeEntity","codeKeyword","codeFunction","codeStatement","codePlaceholder","codeInserted","codeImportant","blockToolbarBackground","blockToolbarTrigger","blockToolbarTriggerIcon","blockToolbarItem","blockToolbarText","blockToolbarHoverBackground","blockToolbarDivider","noticeInfoBackground","noticeInfoText","noticeTipBackground","noticeTipText","noticeWarningBackground","noticeWarningText","light","background","code","cursor","divider","toolbarBackground","toolbarInput","toolbarItem","tableDivider","tableSelected","tableSelectedBackground","quote","codeBackground","codeBorder","horizontalRule","imageErrorBackground","TwitterEmbed","statusId","props","attrs","matches","tweetId","React","Component","YoutubeEmbed","videoId","title","src","LocalEditor","onChange","debounce","value","state","setState","get","save","editor","setEditorRef","el","addUpdateObserver","getNote","refresh","uuid","updateMarkdown","markdown","m","p","q","ref","autoFocus","bind","theme","className","onSearchLink","searchTerm","getHeadings","map","result","subtitle","level","url","id","filter","match","onClickLink","href","event","scrollToAnchor","window","open","embeds","keywords","matcher","component","icon","alt","width","height","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a91efa07.chunk.js","sourcesContent":["import ComponentManager from 'sn-components-api';\n\nexport default class BridgeManager {\n\n  /* Singleton */\n  static instance = null;\n  static get() {\n    if (this.instance == null) { this.instance = new BridgeManager(); }\n    return this.instance;\n  }\n\n  constructor() {\n    this.updateObservers = [];\n    this.initiateBridge();\n  }\n\n  addUpdateObserver(callback) {\n    let observer = { callback: callback };\n    this.updateObservers.push(observer);\n    return observer;\n  }\n\n  notifyObserversOfUpdate() {\n    for (var observer of this.updateObservers) {\n      observer.callback();\n    }\n  }\n\n  getNote() {\n    return this.note;\n  }\n\n  initiateBridge() {\n    var permissions = [\n      {\n        name: \"stream-context-item\"\n        // name: \"stream-items\"\n      }\n    ]\n\n    this.componentManager = new ComponentManager(permissions, function () {\n      // on ready\n    });\n\n    this.componentManager.streamContextItem((item) => {\n      this.note = item;\n      this.notifyObserversOfUpdate();\n    })\n  }\n\n  save() {\n    if (this.note) {\n      // Be sure to capture this object as a variable, as this.note may be reassigned in `streamContextItem`, so by the time\n      // you modify it in the presave block, it may not be the same object anymore, so the presave values will not be applied to\n      // the right object, and it will save incorrectly.\n      let note = this.note;\n      if (note.content && note.content.text) {\n        note.content.text = note.content.text.replace(/\\n\\\\/g, '\\n');\n      }\n      this.componentManager.saveItemWithPresave(note, () => {\n        note = this.note ;\n      });\n    }\n  }\n\n}","const colors = {\n  almostBlack: \"#181A1B\",\n  lightBlack: \"#2F3336\",\n  almostWhite: \"#E6E6E6\",\n  white: \"#FFF\",\n  white10: \"rgba(255, 255, 255, 0.1)\",\n  black: \"#000\",\n  black10: \"rgba(0, 0, 0, 0.1)\",\n  primary: \"#1AB6FF\",\n  greyLight: \"#F4F7FA\",\n  grey: \"#E8EBED\",\n  greyMid: \"#C5CCD3\",\n  greyDark: \"#DAE1E9\",\n};\n\nexport const base = {\n  ...colors,\n  fontFamily:\n    \"var(--sn-stylekit-sans-serif-font)\",\n  fontFamilyMono:\n    \"'SFMono-Regular',Consolas,'Liberation Mono', Menlo, Courier,monospace\",\n  fontWeight: 400,\n  zIndex: 100,\n  link: 'var(--sn-stylekit-info-color)',\n  placeholder: 'var(--sn-stylekit-input-placeholder-color)',\n  textSecondary: \"#4E5C6E\",\n  textLight: colors.white,\n  textHighlight: '#ff0',\n  selected: colors.primary,\n  codeComment: 'var(--sn-stylekit-secondary-foreground-color)',\n  codePunctuation: 'var(--sn-stylekit-contrast-backround-color)',\n  codeNumber: \"#d73a49\",\n  codeProperty: \"#c08b30\",\n  codeTag: \"#3d8fd1\",\n  codeString: \"var(--sn-stylekit-success-color)\",\n  codeSelector: \"#6679cc\",\n  codeAttr: \"#c76b29\",\n  codeEntity: \"#22a2c9\",\n  codeKeyword: 'var(--sn-stylekit-info-color)',\n  codeFunction: \"#6f42c1\",\n  codeStatement: \"#22a2c9\",\n  codePlaceholder: \"#3d8fd1\",\n  codeInserted: \"#202746\",\n  codeImportant: \"#c94922\",\n\n  blockToolbarBackground: colors.white,\n  blockToolbarTrigger: colors.greyMid,\n  blockToolbarTriggerIcon: colors.white,\n  blockToolbarItem: colors.almostBlack,\n  blockToolbarText: colors.almostBlack,\n  blockToolbarHoverBackground: colors.greyLight,\n  blockToolbarDivider: colors.greyMid,\n\n  noticeInfoBackground: \"#F5BE31\",\n  noticeInfoText: colors.almostBlack,\n  noticeTipBackground: \"#9E5CF7\",\n  noticeTipText: colors.white,\n  noticeWarningBackground: \"#FF5C80\",\n  noticeWarningText: colors.white,\n};\n\nexport const light = {\n  ...base,\n  background: 'transparent',\n  text: 'var(--sn-stylekit-paragraph-text-color)',\n  code: 'var(--sn-stylekit-secondary-foreground-color)',\n  cursor: 'var(--sn-stylekit-contrast-foreground-color)',\n  divider: colors.greyMid,\n\n  toolbarBackground: colors.lightBlack,\n  toolbarInput: colors.white10,\n  toolbarItem: colors.white,\n\n  tableDivider: 'var(--sn-stylekit-secondary-foreground-color)',\n  tableSelected: 'var(--sn-stylekit-secondary-foreground-color)',\n  tableSelectedBackground: 'var(--sn-stylekit-contrast-background-color)',\n\n  quote: 'var(--sn-stylekit-secondary-foreground-color)',\n  codeBackground: 'var(--sn-stylekit-secondary-background-color)',\n  codeBorder: 'var(--sn-stylekit-secondary-foreground-color)',\n  horizontalRule: 'var(--sn-stylekit-input-placeholder-color)',\n  imageErrorBackground: colors.greyLight,\n};\n\nexport default light;","import React from 'react';\nimport { debounce } from \"lodash\";\nimport RichMarkdownEditor from \"rich-markdown-editor\";\nimport { TwitterTweetEmbed } from 'react-twitter-embed';\nimport BridgeManager from \"../BridgeManager\";\nimport theme from '../theme';\n\nclass TwitterEmbed extends React.Component {\n  render() {\n    const { attrs } = this.props;\n    const statusId = attrs.matches[1];\n\n    return (\n      <TwitterTweetEmbed tweetId={statusId} placeholder={\"Loading tweet...\"}/>\n    );\n  }\n}\n\nclass YoutubeEmbed extends React.Component {\n  render() {\n    const { attrs } = this.props;\n    const videoId = attrs.matches[1];\n\n    return (\n      <iframe\n        title={`Youtube Embed ${videoId}`}\n        src={`https://www.youtube.com/embed/${videoId}?modestbranding=1`}\n      />\n    );\n  }\n}\n\nexport default class LocalEditor extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n    this.editor = null;\n\n    this.setEditorRef = (el) => {\n      this.editor = el;\n    }\n  }\n\n  componentDidMount() {\n    BridgeManager.get().addUpdateObserver(() => {\n      const note = BridgeManager.get().getNote();\n      const refresh = !this.state.note\n        || (this.state.note && this.state.note.uuid !== note.uuid);\n      this.setState({\n        note: BridgeManager.get().getNote(),\n      });\n      if (refresh) {\n        this.updateMarkdown();\n      }\n    });\n  }\n\n  updateMarkdown() {\n    let markdown = this.state.note.content.text\n      .replace(/(\\n{2})(\\n+)(?!---)/g, (m, p, q) => p + q.replace(/(\\n)/g, '\\\\$1'));\n    if (markdown === \"\") {\n      markdown = \"\\n\";\n    }\n    this.setState({ markdown });\n  }\n\n  onChange = debounce((value) => {\n    const text = value();\n    let note = this.state.note;\n    note.content.text = text;\n    this.setState({ note: note });\n    BridgeManager.get().save();\n  })\n\n  getNoteContents() {\n    if (this.state.note) {\n      return this.state.note.content.text;\n    }\n    return '';\n  }\n\n  render() {\n    return (\n      <div>\n        <RichMarkdownEditor\n          ref={this.setEditorRef}\n          value={ this.state.markdown }\n          placeholder=\"\"\n          autoFocus\n          onChange={ this.onChange.bind(this) }\n          theme={theme}\n          className=\"gKsMQS\"\n\n          onSearchLink={searchTerm => {\n            const results = this.editor.getHeadings();\n\n            return results.map(result => {\n              return { title: result.title, subtitle: `H${result.level}`, url: '#' + result.id };\n            }).filter(result => result.title.match(searchTerm));\n          }}\n\n          onClickLink={(href, event) => {\n            if (href.match(/^#/)) {\n              this.editor.scrollToAnchor(href);\n            } else {\n              window.open(href, \"_blank\");\n            }\n          }}\n\n          embeds={[\n            {\n              title: \"Twitt\",\n              keywords: \"twitter tw\",\n              matcher: url => {\n                return url.match(/^https?:\\/\\/twitter.com\\/[\\d\\w_-]+\\/status\\/(\\d+)/);\n              },\n              component: TwitterEmbed\n            },\n            {\n              title: \"YouTube\",\n              keywords: \"youtube video tube google\",\n              icon: () => (\n                <img\n                  alt=\"Youtube Logo\"\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/7/75/YouTube_social_white_squircle_%282017%29.svg\"\n                  width={24}\n                  height={24}\n                />\n              ),\n              matcher: url => {\n                return url.match(\n                  /(?:https?:\\/\\/)?(?:www\\.)?youtu\\.?be(?:\\.com)?\\/?.*(?:watch|embed)?(?:.*v=|v\\/|\\/)([a-zA-Z0-9_-]{11})$/i\n                );\n              },\n              component: YoutubeEmbed,\n            },\n          ]}\n        />\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './app.scss';\nimport LocalEditor from './lib/components/LocalEditor';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LocalEditor/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}